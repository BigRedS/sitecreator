#! /usr/bin/perl

use strict;

# This script doesn't actually use Template, but this is here so that
# if you don't have the Template Toolkit installed you will get an error
# here and now, rather than halfway through configuring a user.
use Template; #libtemplate-perl

# These, though, you *do* need for this file :)
use YAML qw/LoadFile/; # libyaml-perl
use Getopt::Long;



# Directory with config files in it:
my $d_configFiles = "/etc/sitecreator/";
# Once we've worked out which config file
# to use, that'll go here:
my $f_config = undef;
# How much stuff to print to screen:
my $verbosity = 1;
# Used to store the option passed when the
# user asks for a specific config file:
my $configFilePreference = undef;
# Whether to actually do anything or not:
my $dryRun = undef;

my $defaultEnv = {
  scripts_dir   => "/usr/lib/sitecreator/scripts",
  templates_dir => "/usr/lib/sitecreator/templates",
  vhost_dir     => "/etc/apache2/sites-available",
  log_dir       => "/var/log/sitecreator",
};

# Process some options:
my ($serveraliases, $username);
GetOptions(
	"aliases|=s@"    => \$serveraliases,
	"dryrun|d!"      => \$dryRun,
	"username|u=s"   => \$username,
	"configfile|c=s" => \$configFilePreference,
	"verbosity|v=i"  => \$verbosity,
) or die "Failed to parse command-line arguments";

# Check we've got a domain. If not, offer some small help:
my $domain = $ARGV[0];
if ($domain =~ /^\s*$/){
	print usage();
	exit 1;
}

# Work out which config file we should be using, and load it:
if( $configFilePreference && -f $configFilePreference ){
	$f_config = $configFilePreference;
}else{
	if($configFilePreference){
		_warn ("Couldn't find requested config file '$configFilePreference', attempting to find one");
	}
	$f_config = chooseConfigFile($d_configFiles,$configFilePreference);
}
_info( "Using config file '$f_config'");
my $c = LoadFile($f_config);
$c->{'domain'} = $domain;

# Check the domain is sane, decide whether or not to deduce usernames from it
# and make sure we're not about to attempt to overwrite a unix user:
if($username =~ /.+/){
	$c->{'username'} = $username;
}elsif($c->{'domain'} =~ /^([^\.]+)/){
	$c->{'username'} = $1 unless $c->{'username'} =~ /.+/;
	if(my $pid = unixUserExists($c->{'username'})){
		_error("There is already a unix user with the name $c->{'username'} (pid: $pid)");
	}
}else{
	_error("Invalid domain name ('$c->{'domain'}'): must start with a seris of characters that are not full-stops ('.')");
}

# Set up an environment variable for each key in the env bit of the config:
$c->{'env'} = setEnvironmentVariables($c->{'env'});
# Create and set all configured passwords:
setPasswords($c);
# Get a filehandle on our logfile:
my $fh_log = getLogFileHandle($c);


# Iterate through the scripts, running each one:
my $scripts = $c->{'scripts'};
foreach(@$scripts){
	my $script = interpretPlaceholders($_);
	_info("running $script") unless $dryRun > 0;
	_info("DRYRUN: $script") if $dryRun > 0;
	runscript($script, $c->{'domain'}) unless $dryRun > 0;
}

# And print the results!
my $maxLength = undef;
my $users = $c->{'users'};
# Iterate over each line to find the column widths that we want before doing the actual printing:
my $maxLength;
foreach my $userName (keys(%$users)){
	foreach(keys($users->{$userName})){
		next unless $_ =~ /^_.+_label$/; 
		my $thisLength = length(interpretPlaceholders($users->{$userName}->{$_}));
		$maxLength = $thisLength if $thisLength > $maxLength;
	}
}
# Do the actual printing:
foreach my $userName (sort{$users->{$a}->{'order'} cmp $users->{$b}->{'order'}} keys(%$users) ){
	if (my $label = $users->{$userName}->{'label'}){
		print "$label:\n";
	}else{
		print "$userName\n";
	}
	my @output;
	push (@output, ["Username", $users->{$userName}->{'username'}]);
	push (@output, ["Password", $users->{$userName}->{'password'}]);
	foreach(sort(keys($users->{$userName}))){
		if($_ =~ /^_(.+)_label$/){
			my $label = interpretPlaceholders($users->{$userName}->{'_'.$1.'_label'}, 1);
			my $value = interpretPlaceholders($users->{$userName}->{'_'.$1.'_value'}, 1);
			push(@output, [$label, $value]);
		}
	}
	printResults(\@output, $maxLength);
	print "\n";
}

# # # #
# # #
# #
#

sub runscript{
	my $cmd = shift;
	my $script = (split(/\s/, $cmd))[0];
	my $identifier = shift.":$script";

	$cmd = $c->{'env'}->{'scripts_dir'}.$cmd;
	my $output = `$cmd`;
	if($? == 0){
		_log("COMMAND: $cmd", $identifier);
		_log($output, $identifier);

	}else{
		_log("ERROR running command: $cmd (returned $?)", $identifier);
		_warn("$script exited with non-zero value : $?");
		_log($output, $identifier);
	}
}

sub printResults{
	my $toPrint = shift;
	my $maxWidth = shift;;
	my @output;
	$maxWidth+=4;
	foreach(@$toPrint){
		printf("  %-${maxWidth}s%s\n", $_->[0].":", $_->[1]);
		
	}
}

sub getMaxLength{
	my $strings = shift;
	my $maxLength = 0;
	foreach(@$strings){
		$maxLength = length($_->[0]) if length($_->[0]) > $maxLength;
		
	}
	print "[$maxLength]";
	return $maxLength;
}

# # # #
# Returns true of the user exists, false if it doesn't.
sub unixUserExists{
	my $user = shift;
	return getpwnam($user);
}

# I'm sure there's a better name for this. Replaces all the  placeholder 
# strings (%USERNAME% etc.) with the values that they're a placeholder for.
#
# Accepts an optional second parameter, which defines wether those variables
# which are normally quoted get those quotes. If this value is passed as '1'
# the quotes are turned off, else they're present.
sub interpretPlaceholders{
	my $line = shift;
	my $quotesOff = shift;
	my $q = '"';
	if($quotesOff == 1){
		$q = '';
	}
	$line =~ s/%USERNAME%/$q$c->{'username'}$q/g;
	$line =~ s/%DOMAIN%/$q$c->{'domain'}$q/g;

	if($line =~ /%DOMAINS%/){
		my $domains = $c->{'domain'};
		$domains.=" ".join(" ", @{$c->{'serveraliases'}}) if defined($c->{'serveraliases'});
		$line =~ s/%DOMAINS%/$domains/g;
	}

	if($line =~ /%PASSWORD_(\S+)%/){
		my $passwordName = $1;
		if (my $pw = $c->{'users'}->{$passwordName}->{'password'}){
			$line =~ s/%PASSWORD_$passwordName%/$q$pw$q/g;
		}
	}

	if($line =~ /%USERNAME_(\S+)%/){
		my $userName = $1;
		my $user = interpretPlaceholders($c->{'users'}->{$userName}->{'$username'});
		$line =~ s/%USERNAME_$userName%/$q$user$q/g;
	}

	return $line;
}

# The config file has a list of passwords that will need to be generated, we generate 
# and store those here, and we also resolve any configured usernames by interpolating
# any placeholders:
sub setPasswords{
	my $c = shift;
	my $users = $c->{'users'};
	foreach(keys(%$users)){
		_warn("Zero-length password requested for '$_'") if $c->{'users'}->{$_}->{'length'} < 1;
		$c->{'users'}->{$_}->{'password'} = createPassword($c->{'users'}->{$_}->{'length'}, $c->{'users'}->{$_}->{'complexity'});
		if($c->{'users'}->{$_}->{'username'}){
			$c->{'users'}->{$_}->{'username'} = interpretPlaceholders($c->{'users'}->{$_}->{'username'}, 1);
		}else{
			$c->{'users'}->{$_}->{'username'} = $c->{'username'};
		}
	}
}


# Sets environment vars for each thing defined in the 'env' bit of the config:
sub setEnvironmentVariables{
	my $env = shift;
	foreach my $key (keys(%{$defaultEnv})){
		unless(exists($env->{$key})){
			$env->{$key} = $defaultEnv->{$key};
		}
	}
	foreach my $key (keys(%{$env})){
		my $envKey = uc($key);
		$ENV{$envKey} = $env->{$key};
		_info("Set \$ENV{$envKey} to '".$ENV{$envKey}."' ($env->{$key})");
	}
	return $env;
}

# Create a random password:
sub createPassword{
	my $length = shift;
	my $complexity = shift;
	my @chars = ("A".."Z", "a".."z", 1..9);
	if($complexity && $complexity > 0){
		@chars = (@chars, "!", '$', "%", "^", "&", "-", "_");
	}
	if($complexity && $complexity > 1){
		@chars = (@chars, "*", "(", ")", "{", "}", "[", "]", ":", "@");
	}
	if($complexity && $complexity > 2){
		@chars = (@chars, "~", ";", "'", "#", "<", ">", "?", ",", ".");
	}
	my $password;
	for(my $i = 0; $i<$length; $i++){
		$password.=$chars[rand($#chars)];
	}
	return $password;
}

# basically 'ls $CONFIG_DIR'
sub listConfigFiles{
	my $d_config = shift;
	opendir(my $dh_config, $d_config) or die "Couldn't open config directory '$d_config' : $!";
	my @f_config = grep{/\.yaml$/} sort(readdir($dh_config));
	return @f_config;
}

# If more than one config file exists, prompts the user to pick one and returns
# the name of the chosen one. If there's only one, just returns the name of that
# file
sub chooseConfigFile{
	my $d_configFiles = shift;
	my $configFilePreference = shift;
	my @configFiles = listConfigFiles($d_configFiles);
	if($configFilePreference){
		my @matchingConfigFiles = grep {/^$configFilePreference/} @configFiles;
		my $numMatched = scalar(@matchingConfigFiles);
		if ($numMatched == 1){
			$f_config = $d_configFiles."/".@matchingConfigFiles[0];
		}else{
			_error("Ambiguous config file choice. Found $numMatched files:", 0);
			if($numMatched > 1){
				foreach(@matchingConfigFiles){
					_error("\t$_", 0);
				}
			}
			_error("Run without '-c' to be presented with a list to choose from");
		}
	}else{
		my @f_config = listConfigFiles($d_configFiles);
		return $d_configFiles."/".$configFiles[0] if $#configFiles == 0;
		exit 1 if $verbosity < 0;
		_error("Multiple config files found; pick one by number:\n", 0);
		for(my $i = 0; $i<=$#configFiles; $i++){
			_error("$i\t$configFiles[$i]\n", 0);
		}
		_error( "\n", 0);
		my $choice = <STDIN>;
		return $d_configFiles."/".$configFiles[$choice] if($f_config[$choice] =~ /.+/);
	}
}

# Handy for keeping track of/control over various sorts of output:
sub _warn{
	return unless $verbosity > 0;
	my $message = shift;
	chomp $message;
	print STDERR "WARN: $message\n";
}

sub _error{
	return unless $verbosity > -1;
	my $message = shift;
	my $exit = shift || 1;
	chomp $message;
	print STDERR $message."\n";
	exit $exit if $exit > 1
}

sub _info{
	return unless $verbosity > 1;
	my $message = shift;
	chomp $message;
	$message =~ s/\n/\nINFO: /g;
	print "INFO: $message\n";
}


sub getLogFileHandle{
	my $c = shift;
	my ($d_log,$f_log,$fh_log);
	if(defined($c->{'env'}->{'log_dir'})){
		$d_log = $c->{'env'}->{'log_dir'};
		if ( -d $d_log && -w $d_log ){
			$f_log = $d_log ."/".$c->{'domain'};
			open($fh_log, ">>", $f_log) or die "Error opening logfile: $!";
		}else{
			_error("Error opening logfile; either not writeable or non existant");
		}
	}else{
		$fh_log = \*STDOUT;
	}
	return $fh_log;
}

sub _log{
	return unless $fh_log;
	my $message = shift;
	my $prefix = shift;
	my $time = time();
	my $gap = " ";
	chomp $message;
	$prefix = "[".$prefix."]" if $prefix;
	$prefix = " ".$prefix;
	$message = $time.$prefix.$gap.$message;
	$message =~ s/\n/\n$time$prefix$gap/g;
	print $fh_log $message."\n"; 
}

sub usage{
return <<EOF;
sitecreator

Creates sites.

Usage:
 sitecreator [options] domain name
      --aliases <domains>
      -a <domains>  List of additional, secondary domains. Perhaps for
                    use as Apache ServerAliases. 'www' subdomain is 
                    added automatically.

      --configfile <file>
      -c <file>     Config file to use.

      --dryrun
      -d            Don't execute any scripts or write any files

      --username <username>
      -u <username> username to use, rather than deducing it from the
                    domain name

      --verbosity <number>
      -v <number>   Verbosity:
                     2: Informative/debugging output, warnings and errors
                     1: Non-fatal warnings and fatal errors
                     0: Only fatal errors
                     -1: Hide even errors (exits silently on failure)

EOF

}
